### Roadmap projektu: Skrypt do pobierania kursów kryptowalut i generowania wykresów + Szacowany czas

#### Etap 1: Przygotowanie środowiska i konfiguracja projektu
1. **Wybór technologii**: 1-2 godziny  
   - Język: Python
   - Biblioteki: `requests`, `matplotlib`, `pandas`, `schedule`
   - API: np. CoinGecko, CoinMarketCap

2. **Konfiguracja środowiska lokalnego**: 1 godzina  
   - Instalacja Pythona
   - Instalacja bibliotek (`pip install requests pandas matplotlib schedule`)

3. **Tworzenie struktury projektu**: 30 minut  
   - Organizacja folderu projektu, utworzenie pliku `crypto_fetcher.py`

**Łącznie dla etapu 1**: 2,5-3,5 godziny

#### Etap 2: Pobieranie danych z API
4. **Wybór i konfiguracja API**: 1-2 godziny  
   - Rejestracja na platformie API (jeśli wymagane)
   - Przetestowanie API w Postmanie/przeglądarce

5. **Implementacja funkcji do pobierania kursów**: 2-3 godziny  
   - Napisanie funkcji do pobierania danych z API
   - Testowanie poprawności i integracji z API

6. **Obsługa błędów**: 1-2 godziny  
   - Dodanie timeoutów, ponownych prób, logowania błędów

**Łącznie dla etapu 2**: 4-7 godzin

#### Etap 3: Przetwarzanie i przechowywanie danych
7. **Przetwarzanie danych**: 2-3 godziny  
   - Użycie `pandas` do manipulacji danymi (konwersja do DataFrame, formatowanie)

8. **Zapisywanie danych lokalnie** (opcjonalne): 1 godzina  
   - Zapis danych w CSV lub bazie danych, np. SQLite

**Łącznie dla etapu 3**: 3-4 godziny

#### Etap 4: Generowanie wykresów
9. **Tworzenie wykresów**: 2-3 godziny  
   - Użycie `matplotlib` lub `plotly` do stworzenia wykresów z danych

10. **Obsługa wielu kryptowalut**: 1-2 godziny  
    - Rozszerzenie skryptu o możliwość obsługi wielu kryptowalut jednocześnie

**Łącznie dla etapu 4**: 3-5 godzin

#### Etap 5: Automatyzacja codziennego pobierania danych
11. **Automatyzacja za pomocą `schedule`**: 2-3 godziny  
    - Konfiguracja harmonogramu uruchamiania skryptu codziennie o ustalonej godzinie

12. **Testowanie automatyzacji**: 1-2 godziny  
    - Ręczne testowanie, aby upewnić się, że skrypt działa zgodnie z planem

**Łącznie dla etapu 5**: 3-5 godzin

#### Etap 6: Rozwój i optymalizacja
13. **Optymalizacja**: 2-4 godziny  
    - Ulepszenia w zakresie wydajności, poprawa obsługi API

14. **Rozbudowa o dodatkowe funkcje**: 3-6 godzin  
    - Powiadomienia o zmianach kursów, wsparcie dla dodatkowych wskaźników

**Łącznie dla etapu 6**: 5-10 godzin

#### Etap 7: Deploy i monitoring
15. **Deploy**: 3-5 godzin  
    - Wdrożenie na serwerze (np. Heroku, AWS) lub innym środowisku produkcyjnym

16. **Monitoring**: 2-4 godziny  
    - Dodanie logowania, monitorowania i alertów

**Łącznie dla etapu 7**: 5-9 godzin

---

### Podsumowanie:
- **Etap 1 (Przygotowanie środowiska)**: 2,5-3,5 godziny
- **Etap 2 (Pobieranie danych z API)**: 4-7 godzin
- **Etap 3 (Przetwarzanie i zapisywanie danych)**: 3-4 godziny
- **Etap 4 (Generowanie wykresów)**: 3-5 godzin
- **Etap 5 (Automatyzacja)**: 3-5 godzin
- **Etap 6 (Rozwój i optymalizacja)**: 5-10 godzin
- **Etap 7 (Deploy i monitoring)**: 5-9 godzin

**Łączny szacowany czas**: **25-43 godziny**  

Zależnie od doświadczenia, projekt można ukończyć w około **3-6 dni**, pracując średnio 5-8 godzin dziennie.

	